// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	entity "pokedex/entity"
	dto "pokedex/shared/dto"

	mock "github.com/stretchr/testify/mock"
)

// MonsterRepository is an autogenerated mock type for the MonsterRepository type
type MonsterRepository struct {
	mock.Mock
}

// CreateMonster provides a mock function with given fields: monster
func (_m *MonsterRepository) CreateMonster(monster *entity.Monster) (*entity.Monster, error) {
	ret := _m.Called(monster)

	var r0 *entity.Monster
	if rf, ok := ret.Get(0).(func(*entity.Monster) *entity.Monster); ok {
		r0 = rf(monster)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Monster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Monster) error); ok {
		r1 = rf(monster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTypeOfMonster provides a mock function with given fields: monster
func (_m *MonsterRepository) CreateTypeOfMonster(monster *entity.TypeOfMonster) (string, error) {
	ret := _m.Called(monster)

	var r0 string
	if rf, ok := ret.Get(0).(func(*entity.TypeOfMonster) string); ok {
		r0 = rf(monster)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.TypeOfMonster) error); ok {
		r1 = rf(monster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMonster provides a mock function with given fields: idMonster, typeId
func (_m *MonsterRepository) DeleteMonster(idMonster int, typeId int) (string, error) {
	ret := _m.Called(idMonster, typeId)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, int) string); ok {
		r0 = rf(idMonster, typeId)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(idMonster, typeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllMonsterByFilter provides a mock function with given fields: filter
func (_m *MonsterRepository) FindAllMonsterByFilter(filter *dto.FilterMonster) ([]entity.MonsterDetail, error) {
	ret := _m.Called(filter)

	var r0 []entity.MonsterDetail
	if rf, ok := ret.Get(0).(func(*dto.FilterMonster) []entity.MonsterDetail); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MonsterDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.FilterMonster) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllType provides a mock function with given fields:
func (_m *MonsterRepository) FindAllType() (*[]entity.Type, error) {
	ret := _m.Called()

	var r0 *[]entity.Type
	if rf, ok := ret.Get(0).(func() *[]entity.Type); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Type)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIdType provides a mock function with given fields: _a0
func (_m *MonsterRepository) FindByIdType(_a0 string) (*entity.Type, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Type
	if rf, ok := ret.Get(0).(func(string) *entity.Type); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Type)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMonsterById provides a mock function with given fields: monsterId
func (_m *MonsterRepository) FindMonsterById(monsterId int) (*entity.Monster, error) {
	ret := _m.Called(monsterId)

	var r0 *entity.Monster
	if rf, ok := ret.Get(0).(func(int) *entity.Monster); ok {
		r0 = rf(monsterId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Monster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(monsterId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMonster provides a mock function with given fields: idMonster, dataUpdates
func (_m *MonsterRepository) UpdateMonster(idMonster int, dataUpdates map[string]interface{}) (*entity.Monster, error) {
	ret := _m.Called(idMonster, dataUpdates)

	var r0 *entity.Monster
	if rf, ok := ret.Get(0).(func(int, map[string]interface{}) *entity.Monster); ok {
		r0 = rf(idMonster, dataUpdates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Monster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, map[string]interface{}) error); ok {
		r1 = rf(idMonster, dataUpdates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTypeOfMonster provides a mock function with given fields: mosterId, typeId, typeIdOld
func (_m *MonsterRepository) UpdateTypeOfMonster(mosterId string, typeId string, typeIdOld string) (string, error) {
	ret := _m.Called(mosterId, typeId, typeIdOld)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(mosterId, typeId, typeIdOld)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(mosterId, typeId, typeIdOld)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMonsterRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMonsterRepository creates a new instance of MonsterRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMonsterRepository(t mockConstructorTestingTNewMonsterRepository) *MonsterRepository {
	mock := &MonsterRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
