// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	dto "pokedex/shared/dto"

	mock "github.com/stretchr/testify/mock"
)

// MonsterServices is an autogenerated mock type for the MonsterServices type
type MonsterServices struct {
	mock.Mock
}

// CreateMonster provides a mock function with given fields: req
func (_m *MonsterServices) CreateMonster(req *dto.MonsterInput) (string, error) {
	ret := _m.Called(req)

	var r0 string
	if rf, ok := ret.Get(0).(func(*dto.MonsterInput) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.MonsterInput) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMonster provides a mock function with given fields: monsterId, typeId
func (_m *MonsterServices) DeleteMonster(monsterId int, typeId int) (string, error) {
	ret := _m.Called(monsterId, typeId)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, int) string); ok {
		r0 = rf(monsterId, typeId)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(monsterId, typeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllMonsters provides a mock function with given fields: filter
func (_m *MonsterServices) FindAllMonsters(filter *dto.FilterMonster) ([]dto.MonsterResponse, error) {
	ret := _m.Called(filter)

	var r0 []dto.MonsterResponse
	if rf, ok := ret.Get(0).(func(*dto.FilterMonster) []dto.MonsterResponse); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.MonsterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.FilterMonster) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllType provides a mock function with given fields:
func (_m *MonsterServices) FindAllType() ([]dto.ResponseType, error) {
	ret := _m.Called()

	var r0 []dto.ResponseType
	if rf, ok := ret.Get(0).(func() []dto.ResponseType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ResponseType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIdMonster provides a mock function with given fields: id
func (_m *MonsterServices) FindByIdMonster(id int) (*dto.MonsterResponse, error) {
	ret := _m.Called(id)

	var r0 *dto.MonsterResponse
	if rf, ok := ret.Get(0).(func(int) *dto.MonsterResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.MonsterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMonster provides a mock function with given fields: id, req
func (_m *MonsterServices) UpdateMonster(id int, req *dto.MonsterInputUpdate) (string, error) {
	ret := _m.Called(id, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, *dto.MonsterInputUpdate) string); ok {
		r0 = rf(id, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *dto.MonsterInputUpdate) error); ok {
		r1 = rf(id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMonsterServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewMonsterServices creates a new instance of MonsterServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMonsterServices(t mockConstructorTestingTNewMonsterServices) *MonsterServices {
	mock := &MonsterServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
