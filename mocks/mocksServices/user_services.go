// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	dto "pokedex/shared/dto"

	mock "github.com/stretchr/testify/mock"
)

// UserServices is an autogenerated mock type for the UserServices type
type UserServices struct {
	mock.Mock
}

// LoginUser provides a mock function with given fields: req
func (_m *UserServices) LoginUser(req *dto.UserInputLogin) (*dto.UserResponse, error) {
	ret := _m.Called(req)

	var r0 *dto.UserResponse
	if rf, ok := ret.Get(0).(func(*dto.UserInputLogin) *dto.UserResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.UserInputLogin) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: req
func (_m *UserServices) RegisterUser(req *dto.UserInputRegister) (*dto.UserResponse, error) {
	ret := _m.Called(req)

	var r0 *dto.UserResponse
	if rf, ok := ret.Get(0).(func(*dto.UserInputRegister) *dto.UserResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.UserInputRegister) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserServices creates a new instance of UserServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserServices(t mockConstructorTestingTNewUserServices) *UserServices {
	mock := &UserServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
